const crypto = require("crypto");

const bobPublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyBBmYbsNhZzgnzcB1C2P
aL5Ce13pK94vxk5sSB8F2wWJwTBi14V9VjsWUi13HZ4CIYB2JDKz55CKxg4SYlIc
mvtaCb2Bu7PC3qyeyehVGBQQKbml0QTg9wNuWJIGExncpzOHvTrI/KFDbUtZ46iG
bNfhyZogmmngMw7iMGrtP4O87saBtAinyg4xOC9qJKhM6PL2khDbHCH67Si9o6cp
AHVdJydhk/Cti79IL9j1XcYsPD/bBnV6fIugLHiLcOq0c2xtXCaKu555Ch9fWdq9
ntW2HI+rJpYnmiSNmLgxierQ0XMKW03l09/B5TeLEpvy/RiNqvOxb2azH1vQ8emi
+QIDAQAB
-----END PUBLIC KEY-----`;
const bobPublicKey = crypto.createPublicKey(bobPublicKeyPem);

const bobPrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDIEGZhuw2FnOCf
NwHULY9ovkJ7Xekr3i/GTmxIHwXbBYnBMGLXhX1WOxZSLXcdngIhgHYkMrPnkIrG
DhJiUhya+1oJvYG7s8LerJ7J6FUYFBApuaXRBOD3A25YkgYTGdynM4e9Osj8oUNt
S1njqIZs1+HJmiCaaeAzDuIwau0/g7zuxoG0CKfKDjE4L2okqEzo8vaSENscIfrt
KL2jpykAdV0nJ2GT8K2Lv0gv2PVdxiw8P9sGdXp8i6AseItw6rRzbG1cJoq7nnkK
H19Z2r2e1bYcj6smlieaJI2YuDGJ6tDRcwpbTeXT38HlN4sSm/L9GI2q87FvZrMf
W9Dx6aL5AgMBAAECggEAEAT1J7fuNx/GwiTpy/Mqd6L9aIquXh18QpMau0MlqUIW
I86TqYl2LeKNEN80WZ4ickuKmi8npd/2ZrGvgeksgnHkJaHDmrOkA8e7brQgZS1N
FoQ3nWcYOtsu2Z92pk6kswwunyWu/ICOqTiWfeLLgblfClEhsW+PHNOBI8qaDOLj
rojM5lqoLO4gmzIa1IxPS3ytpxChR9H0ga4yJv7MagF78mKnOrHwBETWhf4AkoLj
AnslHkxM2GSK1QgDN3Gtc5zY3DQNm7Jbwl0Kj7wM1INzsLjpGjcqCXkTdoq2aoZN
O3E7o+BMyXbIFe0EOyc6eWyMnLMsdACmfFDs1kH0wQKBgQDj6jatRUJrUtkHGQGt
tOJ9rwS7C91bliTSUkq2+TH8l1M25zgc02OvRrqlNoivEV8fP7MLq0AhBxmEofdI
GHH8lHN58MeS5xbLBFxIoSDfaihUhRafmKaMmnAwSUXVx+BPH2IPJc30jDfwbpBo
VgERkG0AMf5DmnSw3Opyn9zCuQKBgQDgt5sh8vIXbzLL9xSDdKA/VF9w7LmmP4Pa
gFTErqrwFi5j8YWPb4S+mLCRTEgbMnhCHNTVrTS+rqTyo1/BMrrpNsmO/TJT52L6
Y5uW79J1QyJRk3F3wErbE3TgEe16ofxGCHbmMKFhzjkIkrqqgBcoWVUM//wirXfM
qOfek6zCQQKBgQDH8pcLRcKyUxlxH6AYW6OD7cJxskP9cGhXV7iSc2ZGGh/3/7t7
lnxSrfNas9AP/mZ8DK8wIon9L7RUZp+BUWjW1QnFxdXga/nUG7w2P52OQxykoamq
VApxOaAIzI+GsHZ6E6c8cMcRrt34gZcQ4brIRPNLg5B0kJGlA/pumw7aiQKBgQDQ
Ib6Rpw8LHXcS6voY90Ak5+SuFtOsY0+gZRQeRxkT3beB4gUuYL+2OH3xVZHDfu9b
bJDEh/Q+WEt2YFMkAfSUZKYyxdiDVeCawP8uwVlQOqninImPvI6YcmDh2Dj4SGf8
BYL6mTgf+n1gr2Ys3Q6V1Ietzrqc88XtzNNVl7l/AQKBgQDFe1WD/YAu73D3w5vu
KxMDtlkMcxG7yBriJzCS0CraHRBT7nKaqIudD3PmSjDrLPxfRrrjFrDxd5rRTjvL
WVfPdao85wQTfzyEPS6fCVQwcnrfrP7snZQp5MTvZ28oiAHmZCUgfQdVSJqMw0Qh
wOEoEEYKFJVRZYQsixcWgblnFA==
-----END PRIVATE KEY-----`;
const bobPrivateKey = crypto.createPrivateKey(bobPrivateKeyPem);

const alicePublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAzSgV+KB8qXhaPzZpjyzr
gjtem3fuwSfNHousKKFG+2+gOWZBWo6J/JXihI6URvzOIk3ky/un4kc1r5SlPcb9
ByK7oI8k2MTcDE5KJBx839DpKwdxGNtmONi0YiTNEo6fM2h6J8lzlMNzPnHx2R7k
nmgMLKZ60lKpI7ntLqwZB64tvt8MUF+Res3Cuqu6pz+NctwKBI+zhM6sZjdXoHjg
2S1o6s5QMtHDwDkcjRBciNKsmxvJsYP1bWGGSoimOaKL7av2TOBDmGE11ouuX9o3
a6YpWuV+Kb9J8i9ano9UAm4D3wg7GP/usUfmA4AfAo8LxKB3k1VpOw/6kjHytgwu
xwIDAQAB
-----END PUBLIC KEY-----`;
const alicePublicKey = crypto.createPublicKey(alicePublicKeyPem);

const ciphertextHex = "39d5a01aad140d3a3f4f35427739fc58eef4ad109d4207b6950abbd2be2733f52f020a29e4d6590b21938043014248e133d809ad9c7550e5df9da5486a86db66f78e0830468c7677418de494b0f9727a1e5ac11e5e67011e4f7a0973fbbf829ec2343520b620dbef6467614f5ee55f5b2e67d6c4f6ea7e4781edaf9de783e0d3ad1ceba9c3b786e5d600a45083290d69ec43f985e490bee8167d75f135471147197c05212f81bd5f77dac1c53a176828761ef340b59d60fda58fb93f47e984f18b9b92e36ddb6a524185a15f92eb948a76354143c5c99cec777be99bf71378afa8633d5c50bf7fb70c11a5f598ac65d8db0b3e682cd89e4aad3abc461d77e253";
const ciphertext = Buffer.from(ciphertextHex, "hex");

// RECIPIENT recovers PLAINTEXT
const recoveredPlaintext = crypto.privateDecrypt(bobPrivateKey, ciphertext);
console.log("Recovered Plaintext:", recoveredPlaintext.toString("utf8"));


const signatureHex = "a152957f269a71f92f5d9c0ea1e36be3196c7817e1e97d9fb483cf1ba720fcad3238132149b3d00327c92149378dca6a8fa32cb308c28e819927ca7365d547e8572897ab6f0eaa402b0ea7e5b3740bc79648a6f6dae4778d587df8112d7a9f686f34b98fe38d1463466255e06a2f846f930226d1ef583e9baac7bdfc69d13c02ae71c24b26976b6a45dfa09f728dc49c1b8971f2e63f425e99af9356a6287a439eb730616bc601db5e81dc2bb0dd9ace9a73af6637a4c37a32b26236f99587bd9c317e35bc4edb1f2ccb8a2b8c9c4645427b9a734a20d04f300eaf616f361f563fd60b64519c5bb946d3bb99b549e73273f56ead32c751c77e73c4a60a61211d";
const signature = Buffer.from(signatureHex, "hex");


// RECIPIENT verifies SIGNATURE
const isValid = crypto.verify("sha256", recoveredPlaintext, alicePublicKey, signature);
console.log("RSA signature verified:", isValid);